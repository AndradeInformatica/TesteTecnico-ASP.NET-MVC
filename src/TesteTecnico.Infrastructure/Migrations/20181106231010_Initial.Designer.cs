// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TesteTecnico.Infrastructure.Data;

namespace TesteTecnico.Infrastructure.Migrations
{
    [DbContext(typeof(TesteTecnicoContext))]
    [Migration("20181106231010_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TesteTecnico.ApplicationCore.Entity.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("City")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Complement")
                        .HasColumnName("Complement")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnName("Neighborhood")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnName("Number")
                        .HasColumnType("varchar(15)");

                    b.Property<int>("PersonId");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)))
                        .HasColumnName("State")
                        .HasColumnType("char(2)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnName("Street")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnName("ZipCode")
                        .HasColumnType("varchar(9)");

                    b.HasKey("AddressId");

                    b.HasIndex("PersonId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("TesteTecnico.ApplicationCore.Entity.Customer", b =>
                {
                    b.Property<int>("CustomerId");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("TesteTecnico.ApplicationCore.Entity.LegalPerson", b =>
                {
                    b.Property<int>("LegalPersonId");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("varchar(18)");

                    b.Property<string>("FantasyName")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<string>("SocialName")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.Property<string>("StateRegistration")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("LegalPersonId");

                    b.ToTable("LegalPeople");
                });

            modelBuilder.Entity("TesteTecnico.ApplicationCore.Entity.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte?>("TypePersonId");

                    b.HasKey("PersonId");

                    b.HasIndex("TypePersonId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("TesteTecnico.ApplicationCore.Entity.PhysicalPerson", b =>
                {
                    b.Property<int>("PhysicalPersonId");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("varchar(14)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<string>("RG")
                        .IsRequired()
                        .HasColumnType("varchar(12)");

                    b.HasKey("PhysicalPersonId");

                    b.ToTable("PhysicalsPeople");
                });

            modelBuilder.Entity("TesteTecnico.ApplicationCore.Entity.TypePerson", b =>
                {
                    b.Property<byte>("TypePersonId");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(10)");

                    b.HasKey("TypePersonId");

                    b.ToTable("TypesPeople");
                });

            modelBuilder.Entity("TesteTecnico.ApplicationCore.Entity.Address", b =>
                {
                    b.HasOne("TesteTecnico.ApplicationCore.Entity.Person", "Person")
                        .WithMany("Address")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TesteTecnico.ApplicationCore.Entity.Customer", b =>
                {
                    b.HasOne("TesteTecnico.ApplicationCore.Entity.Person", "Person")
                        .WithOne("Customer")
                        .HasForeignKey("TesteTecnico.ApplicationCore.Entity.Customer", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TesteTecnico.ApplicationCore.Entity.LegalPerson", b =>
                {
                    b.HasOne("TesteTecnico.ApplicationCore.Entity.Person", "Person")
                        .WithOne("LegalPerson")
                        .HasForeignKey("TesteTecnico.ApplicationCore.Entity.LegalPerson", "LegalPersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TesteTecnico.ApplicationCore.Entity.Person", b =>
                {
                    b.HasOne("TesteTecnico.ApplicationCore.Entity.TypePerson", "TypePerson")
                        .WithMany()
                        .HasForeignKey("TypePersonId");
                });

            modelBuilder.Entity("TesteTecnico.ApplicationCore.Entity.PhysicalPerson", b =>
                {
                    b.HasOne("TesteTecnico.ApplicationCore.Entity.Person", "Person")
                        .WithOne("PhysicalPerson")
                        .HasForeignKey("TesteTecnico.ApplicationCore.Entity.PhysicalPerson", "PhysicalPersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
